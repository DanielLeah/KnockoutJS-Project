function User(t,i,e,a,s){this.FName=t,this.LName=i,this.Email=e,this.Gender=a,this.Birthday=s}function AppViewModel(){this.firstName=ko.observable(""),this.lastName=ko.observable(""),this.email=ko.observable(""),this.gender=ko.observable(""),this.bday=ko.observable("");var i=!1;this.fullName=ko.computed(function(){return this.firstName()+" "+this.lastName()},this),this.nameLength=function(){return this.firstName().length},this.lastNameLength=function(){return this.lastName().length},this.emailLength=function(){return this.email().length},this.genderC=function(){return trueSelection(this.gender())},this.bdayLength=function(){return bdayValidation(this.bday())},this.statusFName=ko.computed(function(){return 0==inputAlphabet(this.firstName())?"invalid":"valid"},this),this.statusLName=ko.computed(function(){return 0==inputAlphabet(this.lastName())?"invalid":"valid"},this),this.statusEmail=ko.computed(function(){return 0==emailValidation(this.email())?"invalid":"valid"},this),this.statusGender=ko.computed(function(){return 0==trueSelection(this.gender())?"invalid":"valid"},this),this.statusBday=ko.computed(function(){return 0==bdayValidation(this.bday())?"invalid":"valid"},this),this.submitionButton=function(){if("valid"==this.statusFName()&&"valid"==this.statusLName()&&"valid"==this.statusEmail()&&"valid"==this.statusGender()&&"valid"==this.statusBday()){var t=new User(this.firstName(),this.lastName(),this.email(),this.gender(),this.bday());console.log(t),localStorage.setItem("formInputs",JSON.stringify(t)),i=!0}else console.log("false")},this.btnSeeData=function(){return i}}var inputAlphabet=function(t){return!!t.match(/^[a-zA-Z]+$/)},emailValidation=function(t){return!!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(t)},trueSelection=function(t){return"chose"!=t},bdayValidation=function(t){return 0<Date.parse(t)};ko.applyBindings(new AppViewModel);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
